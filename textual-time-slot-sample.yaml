substitutions: 
  devicename: "textual-time-slot-sample"
  friendly_name: "Textual Time Slot Sample"

esphome:
  name: $devicename
  friendly_name: $friendly_name
  min_version: 2023.11.4
  includes:
    - header-files/TextualTimeSlot.h
  on_boot:
    - priority: 800                # This is where all hardware initialization of vital components is executed
      then:
        - lambda: |-
            ESP_LOGD("on_boot", "------ on boot ------");

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: VERY_VERBOSE # DEBUG , VERY_VERBOSE

# Enable Home Assistant API
api:

ota:

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: Test Fallback Hotspot
    password: ""

captive_portal:

web_server:
  port: 80


binary_sensor:


button:
  - platform: template
    name: 1 Test Date and Time
    on_press:
      then:
        - lambda: print_date_time();

  - platform: template
    name: 2 Test strSplit
    on_press:
      then:
        - lambda: test_strSplit( id(livingroom_time_slots).state );

  - platform: template
    name: 3 Test now is in time slots
    on_press:
      then:
        - script.execute: check_n_set_livingroom


script:
  # Definition of script for trigging check and set
  # of the output state, call this "script.execute" at every event that change a state:
  # switches, sensors and also time.on_time (1 min) for get entering or leaving time slots.

  # Operating logic represented as an
  # electrical circuit of the analogue equivalent.
  # 
  # -+-----+-------------- L
  #  |     |
  #  \ B   \ Enable
  #  | o   |
  #  | o   \ Main Sensor
  #  | s   |
  #  | t   \ Time Slots
  #  |     |
  #  +-----+
  #        |
  #   +----+----+
  #   |  Output |
  #   +----+----+
  #        |
  #  ------+-------------- N
  #

  - id: check_n_set_livingroom
    then:
      if:
        condition:
          or:
            - switch.is_on: boost_livingroom
            - and:
              - switch.is_on: enable_livingroom
              - switch.is_on: main_sensor_livingroom # or binary_sensor.is_on
              - lambda: return isInTimeSlots( id(livingroom_time_slots).state );
        then:
          - switch.turn_on: livingroom_relay
        else:
          - switch.turn_off: livingroom_relay


switch:

  - platform: template
    name: "Boost Livingroom"
    id: boost_livingroom
    icon: mdi:fire
    optimistic: True
    restore_mode: ALWAYS_OFF
    on_turn_on:
      then:
        - script.execute: check_n_set_livingroom
        - delay: 120 min
        - switch.turn_off: boost_livingroom
        - script.execute: check_n_set_livingroom
    on_turn_off:
      then:
        - script.execute: check_n_set_livingroom

  - platform: template
    name: "Enable Livingroom"
    id: enable_livingroom
    icon: mdi:toggle-switch
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      then:
        - script.execute: check_n_set_livingroom
    on_turn_off:
      then:
        - script.execute: check_n_set_livingroom

  # in a real case this will be a binary_sensor,
  # in this test case a switch is used.
  - platform: template
    name: "Main Sensor Livingroom"
    id: main_sensor_livingroom
    icon: mdi:thermostat
    optimistic: True
    # for switch:
    on_turn_on:
      then:
        - script.execute: check_n_set_livingroom
    on_turn_off:
      then:
        - script.execute: check_n_set_livingroom
    # for binary_sensor:
    # on_state:
    #   then:
    #     - script.execute: check_n_set_livingroom

  # the output:
  - platform: gpio
    pin: 25
    name: "Livingroom Relay"
    id: livingroom_relay


text:
  - platform: template
    name: "Livingroom Time Slots"
    id: livingroom_time_slots
    initial_value: "17 07:00 23:59; 23456 05:30 07:30; 23456 12:00 14:00; 23456 16:00 22:00"
    # Slots separator: "; "
    # n. 3 field for slot separated by one white space
    #   [1-7] 1: Sunday ... 7: Saturday
    #   07:00 Start from 00:00 and less than Stop
    #   23:59 Stop greater than Start and less or equal to 23:59
    optimistic: true
    min_length: 0
    max_length: 255 # max. is only 255
    mode: text
    on_value:
      then:
        - script.execute: check_n_set_livingroom


time:
  - platform: sntp
    id: sntp_time  # don't rename this
    # in case of manual_ip, dns1 and dns2 must be setted
    on_time_sync:
      if:
        condition:
          time.has_time:
        then:
          - logger.log: Time has been set and is valid!
    on_time:
      # Called Every 1 minute, after syncronization
      - seconds: 0
        minutes: /1
        then:
          - script.execute: check_n_set_livingroom
